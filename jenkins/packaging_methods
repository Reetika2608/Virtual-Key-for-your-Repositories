#!/bin/bash

PYTHON=python3

clean_working_directory(){
    echo "clean_working_directory: Cleaning un-wanted build files and directories"
    ${PYTHON} setup.py clean
}

audit_import_paths(){
    echo "audit_import_paths: ensuring correct import"
    ${PYTHON} setup.py audit_import_paths
}

install_python_component(){
    echo "install_python_component: Compiling and installing python package"
    # Force install into debian directory, overwiritng any existing files
    ${PYTHON} setup.py install --force --root=debian/data/ --no-compile
    cd debian/data/opt/c_mgmt/src/
    ${PYTHON} -m compileall -b .
    cd ../../../../../

    # Ensure FMC real unit tests are excluded from the debian
    TEST_DIR=debian/data/opt/c_mgmt/src/tests/managementconnector/
    [[ -d ${TEST_DIR} ]] && echo "Exclude Failure: ${TEST_DIR} should not exist" && exit 1

    # Ensure unittests directory tests are installed on box
    UNITTESTS_DIR=debian/data/opt/c_mgmt/src/unittests/cafedynamic/
    [[ ! -d ${UNITTESTS_DIR} ]] && echo "Exclude Failure: ${UNITTESTS_DIR} should get installed" && exit 1
}

duplicate_and_symlink_transform(){
    TRANSFORM_DIR=debian/data/tandberg/upgrade/cdbtransforms.d
    TRANSFORM_FILE=${TRANSFORM_DIR}/cmgmt_transform.py
    POSTINTSTALL_DIR=debian/data/tandberg/etc/postinstall-scripts.d
    [[ ! -d ${POSTINTSTALL_DIR} ]] && echo "Creating ${POSTINTSTALL_DIR}" && mkdir -p ${POSTINTSTALL_DIR}
    [[ -f ${TRANSFORM_FILE} ]] && echo "Found and copying cmgmt_transform.py" && cp ${TRANSFORM_FILE} ${POSTINTSTALL_DIR}/cmgmt-transform

    if [[ -f ${POSTINTSTALL_DIR}/cmgmt-transform ]]; then
        chmod 0755 ${POSTINTSTALL_DIR}/cmgmt-transform
    else
        echo "Transform Creation failure: ${POSTINTSTALL_DIR}/cmgmt-transform not created" && exit 1
    fi

    # Create a symlink in postinstall.current.d, call 80-cmgmt-transform,
    # and have it point at ../postinstall-script/80-cmgmt-transform
    POSTINSTALL_CURRENT=debian/data/tandberg/etc/postinstall.current.d
    [[ ! -d ${POSTINSTALL_CURRENT} ]] && echo "Creating ${POSTINSTALL_CURRENT}" && mkdir -p ${POSTINSTALL_CURRENT}
    pushd ${POSTINSTALL_CURRENT} > /dev/null
    ln -s ../postinstall-scripts.d/cmgmt-transform 80-cmgmt-transform
    popd > /dev/null

    [[ -L ${POSTINSTALL_CURRENT}80-cmgmt-transform ]] && echo "Link Failure: ${POSTINSTALL_CURRENT}80-cmgmt-transform symlink not created" && exit 1
}

sanitize_debian_package(){
    echo "sanitize_debian_package: Removing unwanted files from package"
    # Delete egg info directory from debian pacakge
    if [[ -d debian/data/ ]]; then
        find debian/data/ -name "management_connector*egg-info" -type d -print | xargs rm -rf {}
        find debian/data/ -name "management_connector*.pth" -print | xargs rm -rf {}

        # Don't bundle any py files that have been byte-compiled
        find debian/data/opt/c_mgmt/src/ -name '*.py' -exec rm -rf {} \;
    fi
}

remove_init_py_files(){
    # Remove unwanted __init__.py files from debian package,
    # these files are added and own by the ash/expressway platform
    INIT_FILES="debian/data/__init__.py
                debian/data/share/python/site-packages/ni/tests/__init__.pyc
                debian/data/share/python/site-packages/ni/unittests/__init__.pyc
                debian/data/opt/__init__.py
                debian/data/opt/c_mgmt/__init__.py
                debian/data/opt/c_mgmt/xcommand/__init__.py
                debian/data/opt/c_mgmt/xstatus/__init__.py"

    for file in ${INIT_FILES}
    do
        [[ -f ${file} ]] && echo "Found and removing: ${file}" && rm ${file}
    done
}

include_files(){
    # Copy everything under files into the debian data
    cp -r files/* debian/data/

    [[ ! -f debian/data/share/python/site-packages/ni/utils/logging/plugins/managementconnectorlogplugin.py ]] && echo "hybrid logging plugin not found" && exit 1
}

convert_po_to_mo(){
    msgfmt ./debian/data/tandberg/locale/en_US.utf8/LC_MESSAGES/managementconnector.po -o ./debian/data/tandberg/locale/en_US.utf8/LC_MESSAGES/managementconnector.mo
    [[ ! -f ./debian/data/tandberg/locale/en_US.utf8/LC_MESSAGES/managementconnector.mo ]] && echo "Localisation failure: Mo file not created" && exit 1
    rm ./debian/data/tandberg/locale/en_US.utf8/LC_MESSAGES/managementconnector.po
}

generate_symlinks(){
    INITD_DIR=debian/data/etc/init.d/
    pushd ${INITD_DIR} > /dev/null
    ln -s c_mgmt S80c_mgmt
    popd > /dev/null

    [[ ! -L ${INITD_DIR}S80c_mgmt ]] && echo "Link Failure: ${INITD_DIR}S80c_mgmt symlink not created" && exit 1

    RC2_DIR=debian/data/etc/rc2.d/
    [[ ! -d ${RC2_DIR} ]] && mkdir -p ${RC2_DIR}
    pushd ${RC2_DIR} > /dev/null
    ln -s ../init.d/c_mgmt S80c_mgmt
    popd > /dev/null

    [[ ! -L ${RC2_DIR}S80c_mgmt ]] && echo "Link Failure: ${RC2_DIR}S80c_mgmt symlink not created" && exit 1

    TANDBERG_ETC_DIR=/tandberg/persistent/fusion/config/
    ETC_DIR=debian/data/opt/c_mgmt/etc/
    pushd ${ETC_DIR} > /dev/null
    ln -s ${TANDBERG_ETC_DIR} config
    popd > /dev/null

    [[ ! -L ${ETC_DIR}config ]] && echo "Link Failure: ${ETC_DIR}config symlink not created" && exit 1


    # Create a symlink from /opt/c_mgmt/bin/ -> /opt/c_mgmt/usr/bin/
    # prexisting FMC have a bin symlink, which debian/dpkg can't get replace
    # with a real dir, so, point the bin symlink to a new loation
    OPT_C_MGMT_DIR=debian/data/opt/c_mgmt/
    pushd ${OPT_C_MGMT_DIR} > /dev/null
    ln -s usr/bin/ bin
    popd

    [[ ! -L ${OPT_C_MGMT_DIR}bin ]] && echo "Link Failure: ${OPT_C_MGMT_DIR}bin symlink not created" && exit 1
}

install_external_dependencies(){
    WEBSOCKET_DIR=debian/data/opt/c_mgmt/lib/websocket_client/
    pip install websocket-client==1.2.1 --target=${WEBSOCKET_DIR} --no-dependencies
    [[ ! -d ${WEBSOCKET_DIR}websocket/ ]] && echo "External Dependencies Failure: ${WEBSOCKET_DIR}websocket/ install failure" && exit 1

    # Extra python dependencies
    pip install pyinotify==0.9.6 --target=debian/data/opt/c_mgmt/lib/pyinotify/ --no-dependencies
    pip install six==1.13.0 --target=debian/data/opt/c_mgmt/lib/six/ --no-dependencies
    pip install httplib2==0.20.4 --target=debian/data/opt/c_mgmt/lib/httplib/ --no-dependencies
    pip install pyparsing==3.0.9 --target=debian/data/opt/c_mgmt/lib/httplib/ --no-dependencies
    pip install pyratemp==0.3.2 --target=debian/data/opt/c_mgmt/lib/pyratemp/ --no-dependencies
    pip install jsonschema==4.6.0 --target=debian/data/opt/c_mgmt/lib/jsonschema/
    pip install idna==3.3 --target=debian/data/opt/c_mgmt/lib/idna/ --no-dependencies
    pip install cryptography==37.0.4 --target=debian/data/opt/c_mgmt/lib/cryptography/
    pip install defusedxml==0.7.1 --target=debian/data/opt/c_mgmt/lib/defusedxml/ --no-dependencies
}

cleanup_external_dependencies(){
    rm -rf debian/data/opt/c_mgmt/lib/websocket_client/websocket/tests
    rm -rf debian/data/opt/c_mgmt/lib/websocket_client/websocket/cacert.pem
    cp files/opt/c_mgmt/etc/cacert.pem  ./debian/data/opt/c_mgmt/lib/websocket_client/websocket/

}
generate_debian_version(){
    PIPELINE_VERSION=1.0
    PR_VERSION=555
    DEVELOPER_VERSION=999.0

    BUILD_NUMBER=$1
    BUILD_TYPE=$2

    # Creating a staging directory for the control files, and copy the source for manipulation and packing
    CONTROL_BUILD=debian/control/_build
    CONTROL_FILE=${CONTROL_BUILD}/control
    [[ ! -d ${CONTROL_BUILD} ]] && mkdir -p ${CONTROL_BUILD}

    # Copy files to packing directory, newly created empty dir will be ignored
    cp debian/control/* ${CONTROL_BUILD}

    # Find out what type of build it is, local, PR or pipeline
    if [[ $BUILD_TYPE == PR-* ]]; then
        # Example: 8.10-555.53.1, 555 is a hardcoded PR identifier, 53, is the PR number, and the 1 is the build number
        # as there may be multiple builds within a PR
        CHANGE_ID="${BUILD_TYPE:3}"
        BUILD_VERSION=${PR_VERSION}.${CHANGE_ID}.${BUILD_NUMBER}
        echo "generate_debian_version: This is a PR build: ${BUILD_VERSION}"

    elif [ "$BUILD_TYPE" == "master" ]; then
        # Example: 8.10-1.0.321353
        BUILD_VERSION=${PIPELINE_VERSION}.${BUILD_NUMBER}
        echo "generate_debian_version: This is a master branch build: ${BUILD_VERSION}"
    else
        # Example: 8.10-999.0.12345
        BUILD_VERSION=${DEVELOPER_VERSION}.${BUILD_NUMBER}
        echo "generate_debian_version: This is a local developer build: ${BUILD_VERSION}"
    fi

    # Replace the placeholder in the control file with the build revision
    sed -i "s/BUILD_VERSION/${BUILD_VERSION}/" ${CONTROL_FILE}
}

remove_group_write_permissions(){
    chmod -R g-w ./debian

    num_found=$(find ./debian -perm -g=w -type f | wc -l)
    if [ $num_found -ne 0 ]; then
        echo "Files exist with the group write permission set - FAILING BUILD"
        echo "Infringing files are:"
        find ./debian -perm -g=w -type f
        exit 1
    fi
}

package_debian(){
    # Build a debian from a debian-bnary, control, and data tars.
    echo "package_debian: Building the control, data tars and debian package"

    if [[ "$(uname)" == "Darwin" ]]; then
        echo "It looks like you are running on a Mac. Using gtar to build the debian"
        echo "To install gtar via homebrew run: brew install gnu-tar"
        TAR=gtar
    else
        TAR=tar
    fi

    [[ ! -d debian/_build/ ]] && mkdir -p debian/_build/

    pushd debian/control/_build > /dev/null
    ${TAR} czp --owner=root --group=root -f ../../_build/control.tar.gz .
    popd > /dev/null

    CONTROL_TAR=debian/_build/control.tar.gz
    [[ ! -f ${CONTROL_TAR} ]] && echo "Archive Failure: ${CONTROL_TAR} not created" && exit 1

    pushd debian/data > /dev/null
    ${TAR} czp --owner=root --group=root -f ../_build/data.tar.gz .
    popd > /dev/null

    DATA_TAR=debian/_build/data.tar.gz
    [[ ! -f ${DATA_TAR} ]] && echo "Archive Failure: ${DATA_TAR} not created" && exit 1

    pushd debian/_build/ > /dev/null
    ar -r c_mgmt.deb ../debian-binary control.tar.gz data.tar.gz
    popd > /dev/null

    C_MGMT_DEB=debian/_build/c_mgmt.deb
    if [[ -f ${C_MGMT_DEB} ]]; then
        echo "package_debian: ${C_MGMT_DEB} created."
    else
        echo "Archive Failure: ${C_MGMT_DEB} not created" && exit 1
    fi
}

audit_debian_contents(){
    # Audit the contents of the debian to ensure critical files exist and are located as expected
    C_MGMT_DEB=debian/_build/c_mgmt.deb
    content_haystack=$(dpkg --contents ${C_MGMT_DEB})

    files="./share/pubkeys/fmc.1
           ./share/python/site-packages/ni/utils/logging/plugins/managementconnectorlogplugin.py"

    for file in ${files}
    do
        if [[ ! ${content_haystack} == *"${file}"* ]]; then
            echo "audit_debian_contents: Could not find file: ${file}" && exit 1
        fi
    done
}

package_tlp() {
    if [[ $# -ne 4 ]]; then
        echo "USAGE: $0 <source .deb file> <temp dir> <private key> <signature>"
        exit 1
    fi

    SRCTAR=$1
    TMPDIR=$2
    PUBLICKEY=$3
    SIGNEW=$4

    if [[ -d ${TMPDIR} ]]; then
        echo ERROR: Temp dir ${TMPDIR} exists
        exit 1
    fi

    mkdir -p ${TMPDIR}

    DEBIAN=$SRCTAR
    PKGNAME=`dpkg-deb -f $SRCTAR Package`
    VERSION=`dpkg-deb -f $SRCTAR Version`
    ARCH=`dpkg-deb -f $SRCTAR Architecture`

    dd if=/dev/urandom of=${TMPDIR}/passphrase.txt bs=512 count=1
    mkdir -p ${TMPDIR}/pkg
    mkdir -p ${TMPDIR}/pkg/.sigs
    openssl enc -aes-128-cbc -salt -pass file:${TMPDIR}/passphrase.txt -in $SRCTAR -out ${TMPDIR}/pkg/pkg.enc
    openssl rsautl -sign -inkey ${PUBLICKEY} -in ${TMPDIR}/passphrase.txt -out ${TMPDIR}/pkg/sig
    cp $SRCTAR ${TMPDIR}/pkg/01-pkg.deb
    cp $SIGNEW ${TMPDIR}/pkg/.sigs/fmc
    tar cf ${PKGNAME}_${VERSION}_${ARCH}.tlp -C ${TMPDIR}/pkg .
}

sign_debian() {
    if [[ $# -ne 2 ]]; then
        echo "USAGE: $0 <source .deb file> <swims ticket>"
        exit 1
    fi
    DEBIAN=$1
    TICKET=$2

    ./jenkins/swims/code_sign_2.5 raw-sign -verbose -logLevel DEBUG -host swims-rtp.cisco.com --image_location ${DEBIAN} -p "Fusion_Management_Connector" -k RELEASE -K "FMC_KEY" -I "SW-VCS-8.X-K9" -A Ticket -T ${TICKET} -N "FMC signing"
}

tidyup_tlp() {
    if [[ $# -ne 4 ]]; then
        echo "USAGE: $0 <source .deb file> <temp dir> <private key> <build dir>"
        exit 1
    fi

    DEBIAN=$1
    TMPDIR=$2
    PUBLICKEY=$3
    BUILDDIR=$4

    BASEFILENAME=`basename ${DEBIAN} .deb`
    ORIGTLP=`ls -t ${BASEFILENAME}*.tlp | head -1`
    TLPFILENAME=`echo ${ORIGTLP} | sed 's/_all//'`

    mv ${ORIGTLP} ${BUILDDIR}/${TLPFILENAME}

    # Tidy up. remove the temporary directory and the intermediate .deb file.
    rm -rf ${TMPDIR}
    rm -rf ${PUBLICKEY}

    if [[ -f ${BUILDDIR}/${TLPFILENAME} ]]; then
	    echo "Done. Package ${TLPFILENAME} created."
	    exit 0
    else
	    echo "Package ${TLPFILENAME} not created."
	    exit 1
    fi
}
