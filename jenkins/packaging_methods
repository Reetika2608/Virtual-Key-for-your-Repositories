#!/bin/bash

PYTHON=python
TOOLCHAIN_PYTHON=/tandberg/system/toolchain/x86_64_gcc-7.3.0_glibc-2.28_i686-host-linux-gnu-5/bin/python

if [[ -f ${TOOLCHAIN_PYTHON}  ]]; then
    # Use the local toolchain python if it's available
    PYTHON=${TOOLCHAIN_PYTHON}
fi

clean_working_directory(){
    echo "clean_working_directory: Cleaning un-wanted build files and directories"
    python setup.py clean
}

audit_import_paths(){
    echo "audit_import_paths: ensuring correct import"
    python setup.py audit_import_paths
}

install_python_component(){
    echo "install_python_component: Compiling and installing python package"
    # Force install into debian directory, overwiritng any existing files
    ${PYTHON} setup.py install --force --root=debian/data/ -O0 --compile

    # Ensure FMC real unit tests are excluded from the debian
    TEST_DIR=debian/data/share/python/site-packages/ni/tests/managementconnector/
    [[ -d ${TEST_DIR} ]] && echo "Exclude Failure: ${TEST_DIR} should not exist" && exit 1

    # Ensure unittests directory tests are installed on box
    UNITTESTS_DIR=debian/data/share/python/site-packages/ni/unittests/cafedynamic/
    [[ ! -d ${UNITTESTS_DIR} ]] && echo "Exclude Failure: ${UNITTESTS_DIR} should get installed" && exit 1
}

duplicate_and_symlink_transform(){
    TRANSFORM_DIR=debian/data/tandberg/upgrade/cdbtransforms.d
    TRANSFORM_FILE=${TRANSFORM_DIR}/cmgmt_transform.py
    POSTINTSTALL_DIR=debian/data/tandberg/etc/postinstall-scripts.d
    [[ ! -d ${POSTINTSTALL_DIR} ]] && echo "Creating ${POSTINTSTALL_DIR}" && mkdir -p ${POSTINTSTALL_DIR}
    [[ -f ${TRANSFORM_FILE} ]] && echo "Found and copying cmgmt_transform.py" && cp ${TRANSFORM_FILE} ${POSTINTSTALL_DIR}/cmgmt-transform

    if [[ -f ${POSTINTSTALL_DIR}/cmgmt-transform ]]; then
        chmod 0755 ${POSTINTSTALL_DIR}/cmgmt-transform
    else
        echo "Transform Creation failure: ${POSTINTSTALL_DIR}/cmgmt-transform not created" && exit 1
    fi

    # Create a symlink in postinstall.current.d, call 80-cmgmt-transform,
    # and have it point at ../postinstall-script/80-cmgmt-transform
    POSTINSTALL_CURRENT=debian/data/tandberg/etc/postinstall.current.d
    [[ ! -d ${POSTINSTALL_CURRENT} ]] && echo "Creating ${POSTINSTALL_CURRENT}" && mkdir -p ${POSTINSTALL_CURRENT}
    pushd ${POSTINSTALL_CURRENT} > /dev/null
    ln -s ../postinstall-scripts.d/cmgmt-transform 80-cmgmt-transform
    popd > /dev/null

    [[ -L ${POSTINSTALL_CURRENT}80-cmgmt-transform ]] && echo "Link Failure: ${POSTINSTALL_CURRENT}80-cmgmt-transform symlink not created" && exit 1
}

sanitize_debian_package(){
    echo "sanitize_debian_package: Removing unwanted files from package"
    # Delete egg info directory from debian pacakge
    if [[ -d debian/data/ ]]; then
        find debian/data/ -name "management_connector*egg-info" -type d -print | xargs rm -rf {}
        find debian/data/ -name "management_connector*.pth" -print | xargs rm -rf {}

        # Don't bundle any py files that have been byte-compiled
        find debian/data/share/python/ -name '*.py' -exec rm -rf {} \;
    fi
}

remove_init_py_files(){
    # Remove unwanted __init__.py files from debian package,
    # these files are added and own by the ash/expressway platform
    INIT_FILES="debian/data/__init__.py
                debian/data/share/python/site-packages/ni/tests/__init__.pyc
                debian/data/share/python/site-packages/ni/unittests/__init__.pyc
                debian/data/share/python/site-packages/ni/utils/__init__.pyc
                debian/data/share/python/site-packages/ni/utils/logging/__init__.pyc
                debian/data/share/python/site-packages/ni/utils/logging/plugins/__init__.pyc
                debian/data/opt/__init__.py
                debian/data/opt/c_mgmt/__init__.py
                debian/data/opt/c_mgmt/xcommand/__init__.py
                debian/data/opt/c_mgmt/xstatus/__init__.py"

    for file in ${INIT_FILES}
    do
        [[ -f ${file} ]] && echo "Found and removing: ${file}" && rm ${file}
    done
}

include_files(){
    # Copy everything under files into the debian data
    cp -r files/* debian/data/
}

convert_po_to_mo(){
    msgfmt ./debian/data/tandberg/locale/en_US.utf8/LC_MESSAGES/managementconnector.po -o ./debian/data/tandberg/locale/en_US.utf8/LC_MESSAGES/managementconnector.mo
    [[ ! -f ./debian/data/tandberg/locale/en_US.utf8/LC_MESSAGES/managementconnector.mo ]] && echo "Localisation failure: Mo file not created" && exit 1
    rm ./debian/data/tandberg/locale/en_US.utf8/LC_MESSAGES/managementconnector.po
}

generate_symlinks(){
    INITD_DIR=debian/data/etc/init.d/
    pushd ${INITD_DIR} > /dev/null
    ln -s c_mgmt S80c_mgmt
    popd > /dev/null

    [[ ! -L ${INITD_DIR}S80c_mgmt ]] && echo "Link Failure: ${INITD_DIR}S80c_mgmt symlink not created" && exit 1

    RC2_DIR=debian/data/etc/rc2.d/
    [[ ! -d ${RC2_DIR} ]] && mkdir -p ${RC2_DIR}
    pushd ${RC2_DIR} > /dev/null
    ln -s ../init.d/c_mgmt S80c_mgmt
    popd > /dev/null

    [[ ! -L ${RC2_DIR}S80c_mgmt ]] && echo "Link Failure: ${RC2_DIR}S80c_mgmt symlink not created" && exit 1

    TANDBERG_ETC_DIR=/tandberg/persistent/fusion/config/
    ETC_DIR=debian/data/opt/c_mgmt/etc/
    pushd ${ETC_DIR} > /dev/null
    ln -s ${TANDBERG_ETC_DIR} config
    popd > /dev/null

    [[ ! -L ${ETC_DIR}config ]] && echo "Link Failure: ${ETC_DIR}config symlink not created" && exit 1

    OPT_BIN=/share/python/site-packages/ni/managementconnector
    OPT_TEST=/share/python/site-packages/ni/tests/managementconnector
    OPT_CMGMT_DIR=debian/data/opt/c_mgmt/
    pushd ${OPT_CMGMT_DIR} > /dev/null
    ln -s ${OPT_BIN} bin
    ln -s ${OPT_TEST} test
    popd > /dev/null

    [[ ! -L ${OPT_CMGMT_DIR}bin ]] && echo "Link Failure: ${OPT_CMGMT_DIR}bin symlink not created" && exit 1
    [[ ! -L ${OPT_CMGMT_DIR}test ]] && echo "Link Failure: ${OPT_CMGMT_DIR}test symlink not created" && exit 1
}

install_external_dependencies(){
    WEBSOCKET_DIR=debian/data/opt/c_mgmt/lib/websocket_client/
    pip install websocket-client==0.37.0 --target=${WEBSOCKET_DIR} --no-dependencies
    [[ ! -d ${WEBSOCKET_DIR}websocket/ ]] && echo "External Dependencies Failure: ${WEBSOCKET_DIR}websocket/ install failure" && exit 1
}

generate_debian_version(){
    PIPELINE_VERSION=1.0
    PR_VERSION=555.0
    DEVELOPER_VERSION=999.0

    BUILD_NUMBER=$1

    # Creating a staging directory for the control files, and copy the source for manipulation and packing
    CONTROL_BUILD=debian/control/_build
    CONTROL_FILE=${CONTROL_BUILD}/control
    [[ ! -d ${CONTROL_BUILD} ]] && mkdir -p ${CONTROL_BUILD}

    # Copy files to packing directory, newly created empty dir will be ignored
    cp debian/control/* ${CONTROL_BUILD}

    # Find out what type of build it is, local, PR or pipeline
    if [ "$CHANGE_ID" != "" ]; then
        # Example: 8.10-555.0.53, where change id is the PR build number
        BUILD_VERSION=${PR_VERSION}"."${CHANGE_ID}
        echo "generate_debian_version: This is a PR build: ${BUILD_VERSION}"

    elif [ "$JOB_BASE_NAME" == "master" ]; then
        # Example: 8.10-1.0.321353
        BUILD_VERSION=${PIPELINE_VERSION}.${BUILD_NUMBER}
        echo "generate_debian_version: This is a master branch build: ${BUILD_VERSION}"
    else
        # Example: 8.10-999.0.12345
        BUILD_VERSION=${DEVELOPER_VERSION}.${BUILD_NUMBER}
        echo "generate_debian_version: This is a local developer build: ${BUILD_VERSION}"
    fi

    # Replace the placeholder in the control file with the build revision
    sed -i "s/BUILD_VERSION/${BUILD_VERSION}/" ${CONTROL_FILE}
}

package_debian(){
    # Build a debian from a debian-bnary, control, and data tars.
    echo "package_debian: Building the control, data tars and debian package"
    [[ ! -d debian/_build/ ]] && mkdir -p debian/_build/

    pushd debian/control/_build > /dev/null
    tar czp --owner=root --group=root -f ../../_build/control.tar.gz .
    popd > /dev/null

    CONTROL_TAR=debian/_build/control.tar.gz
    [[ ! -f ${CONTROL_TAR} ]] && echo "Archive Failure: ${CONTROL_TAR} not created" && exit 1

    pushd debian/data > /dev/null
    tar czp --owner=root --group=root -f ../_build/data.tar.gz .
    popd > /dev/null

    DATA_TAR=debian/_build/data.tar.gz
    [[ ! -f ${DATA_TAR} ]] && echo "Archive Failure: ${DATA_TAR} not created" && exit 1

    pushd debian/_build/ > /dev/null
    ar -r c_mgmt.deb ../debian-binary control.tar.gz data.tar.gz
    popd > /dev/null

    C_MGMT_DEB=debian/_build/c_mgmt.deb
    if [[ -f ${C_MGMT_DEB} ]]; then
        echo "package_debian: ${C_MGMT_DEB} created."
    else
        echo "Archive Failure: ${C_MGMT_DEB} not created" && exit 1
    fi
}
