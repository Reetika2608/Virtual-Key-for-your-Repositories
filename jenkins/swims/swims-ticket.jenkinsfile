#!/usr/bin/groovy

timestamps {
    stage('Create ticket') {
        currentBuild.description = "Create SWIMs ticket"

        node('SPARK_BUILDER_TOOLS') {
            checkout scm
            // Get user who started the build
            wrap([$class: 'BuildUser']) {
                user_id = "${BUILD_USER_ID}"
            }

            currentBuild.description = "<a href=\"${BUILD_URL}input\">Ticket waiting for approval, Click here to approve ticket</a>"
            send_to = get_approver_list(user_id)
            echo "run command with User: ${user_id} to approvers: ${send_to}"
            try {
                sh("./jenkins/swims/code_sign_2.5 swims ticket create -verbose -logLevel DEBUG -host swims-rtp.cisco.com -products Fusion_Management_Connector -ticketType RELEASE -approverNames ${send_to} -authType OTP -username1 ${user_id} -password1 'push' -reason 'FMC TLP Creation' > command_output.txt")
                ticket = sh(returnStdout: true, script: "cat command_output.txt | sed -n 's/.*\"ticketId\": \\([0-9]*\\).*/\\1/p'")[0..-2]
                print("Got Ticket ID: ${ticket}")

                writeFile(file: 'swims_ticket.txt', text: """${ticket}""")
                stash(name: "swims_ticket", includes: "swims_ticket.txt")
                print("SWIMs ticket request created")
            } catch (Exception exception) {
                print("Failed to create SWIMs ticket request")
                throw exception
            }
        }
    }

    stage('Approve ticket') {
        checkpoint 'Approve ticket'
        approver = null
        timeout(time: 4, unit: 'HOURS') {
            currentBuild.description = "<a href=\"${BUILD_URL}input\">Ticket waiting for approval, Click here to approve ticket</a>"
            approver = input(submitterParameter: 'user_id',
                                 message: 'Approve two Duo Push requests, first to approve the ticket and the next to download it')
        }

        node('SPARK_BUILDER_TOOLS') {
            checkout scm

            unstash("swims_ticket")
            ticket = sh(returnStdout: true, script: "cat swims_ticket.txt")
            print("Run approve command with this username: ${approver} and the ticket ID: ${ticket} to create tic file")
            sh(script: """
                if [ -f *.tic]; then
                    rm -rf *.tic
                fi
            """.trim())
            sh("./jenkins/swims/code_sign_2.5 swims ticket approve -host swims-rtp.cisco.com -ticket ${ticket} -authType OTP -username1 ${approver} -password1 'push'")
            sh("./jenkins/swims/code_sign_2.5 swims ticket download -host swims-rtp.cisco.com -ticket ${ticket} -authType OTP -username1 ${approver} -password1 'push' -out FMC.tic.RELEASE")
            sh(script: """
                if [ -f *output.txt]; then
                    rm *output.txt
                fi
            """.trim())
            print("SWIMS ticket ${ticket} was approved by ${approver}")
            stash(name: "swims_ticket", includes: "FMC.tic.RELEASE")
        }
    }


    stage('Validate ticket') {
        checkpoint 'Validate ticket'
        node('SPARK_BUILDER_TOOLS') {
            checkout scm
            unstash("swims_ticket")
            sh("./jenkins/swims/code_sign_2.5 swims ticket status -host swims-rtp.cisco.com -authType Ticket -ticket FMC.tic.RELEASE")
        }
    }

    stage('Update stored ticket') {
        checkpoint 'Update ticket'
        node('SPARK_BUILDER_TOOLS') {
            unstash('swims_ticket')

            swims_ticket = "FMC.tic.RELEASE"

            date = new Date().format('H:m, dd/MMM/yyyy')
            content = readFile(file: swims_ticket)
            withCredentials([sshUserPrivateKey(credentialsId: "cafefusion.gen-ssh", keyFileVariable: 'private_key')]) {
                sh("""cat > credential.xml <<EOF
<org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl plugin="plain-credentials">
  <id>fmc-swims</id>
  <description>FMC SWIMS updated on $date</description>
  <secret>$content</secret>
</org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl>
EOF""")
                sh("ssh -p 2030 -o StrictHostKeyChecking=no -i ${private_key} cafefusion.gen@sqbu-jenkins.wbx2.com update-credentials-by-xml folder::item::/team/management-connector/pipeline _ fmc-swims < credential.xml")
            }
        }
    }
}


def get_approver_list(user_id) {
    def authorised_approvers = ["namalraj", "kribalac"] as String[]
    def skip = 0
    for (int i = 0; i < authorised_approvers.size(); i++) {
        if (user_id == authorised_approvers[i]) {
            skip = i
        }
    }
    def send_to_approvers_string = ""
    for (int j = 0; j < authorised_approvers.size(); j++) {
        if (j != skip) {
            send_to_approvers_string = send_to_approvers_string + authorised_approvers[j] + ","
        }
    }
    send_to_approvers_string = send_to_approvers_string[0..-2]
    return send_to_approvers_string
}
