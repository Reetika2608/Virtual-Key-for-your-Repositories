# Ignore "Line too long" warnings.              pylint: disable=C0301
# Ignore "Method could be a function" warnings. pylint: disable=R0201
# Ignore "Anomalous backslash in string" warnings     pylint: disable=W1401
# Ignore "No name in module" warnings                 pylint: disable=E0611
# Ignore "Unable to import" warnings                  pylint: disable=F0401

"""This module includes functions and classes to deal with a log4 configuration
file.
"""

# Standard library imports
import errno
import logging
import re
import time

# Local application/library specific imports
from base_platform.expressway.filesystem.filewriter import FileWriter
from base_platform.expressway.filesystem.monitor import FileMonitor
from base_platform.expressway.filesystem.twistedmonitor import TwistedFileMonitor
import base_platform.expressway.logframework.setup
from base_platform.expressway.platforminfo import PlatformInfo
from base_platform.expressway.logframework.plugin import Plugin

logging.TRACE = 5

LOG4_LEVEL_MAP = {
    'FATAL': logging.CRITICAL,
    'ERROR': logging.ERROR,
    'WARN': logging.WARNING,
    'INFO': logging.INFO,
    'DEBUG': logging.DEBUG,
    'TRACE': logging.TRACE,
    }

for name, level in LOG4_LEVEL_MAP.iteritems():
    logging.addLevelName(level, name)


def get_logging_level(log4_level):
    """Map a log4 log level to a python logging level."""
    try:
        return LOG4_LEVEL_MAP[log4_level]
    except KeyError:
        return logging.TRACE


BOILERPLATE1 = """\
###############################################################################

# Set the Root Logger level
log4j.rootLogger=WARN

###############################################################################

# Setup the administratorAppender
log4j.appender.administratorAppender=org.apache.log4j.SyslogAppender
log4j.appender.administratorAppender.sysloghost=localhost
log4j.appender.administratorAppender.facility=local0
log4j.appender.administratorAppender.layout=org.apache.log4j.PatternLayout
log4j.appender.administratorAppender.layout.ConversionPattern=%m UTCTime="%d{}{GMT}"%n
# Make sure administratorAppenderLogger can also log via the rootLogger (or other ancestor)
log4j.additivity.administrator=true

###############################################################################

# Setup the developerAppender
log4j.appender.developerAppender=org.apache.log4j.SyslogAppender
log4j.appender.developerAppender.sysloghost=localhost
log4j.appender.developerAppender.facility=local5
log4j.appender.developerAppender.layout=org.apache.log4j.PatternLayout
log4j.appender.developerAppender.layout.ConversionPattern=UTCTime="%d{}{GMT}" Module="%c" Level="%p" CodeLocation="%l" Method="%C::%M" Thread="%t": %m%n
# Make sure developerLogger can also log via the rootLogger (or other ancestor)
log4j.additivity.developer=true

###############################################################################

# Setup the networkAppender
log4j.appender.networkAppender=org.apache.log4j.SyslogAppender
log4j.appender.networkAppender.sysloghost=localhost
log4j.appender.networkAppender.facility=local6
log4j.appender.networkAppender.layout=org.apache.log4j.PatternLayout
log4j.appender.networkAppender.layout.ConversionPattern=UTCTime="%d{}{GMT}" Module="%c" Level="%p": %m%n
# Make sure networkLogger can also log via the rootLogger (or other ancestor)
log4j.additivity.network=true

###############################################################################

# Setup the configAppender
log4j.appender.configAppender=org.apache.log4j.SyslogAppender
log4j.appender.configAppender.sysloghost=localhost
log4j.appender.configAppender.facility=local1
log4j.appender.configAppender.layout=org.apache.log4j.PatternLayout
log4j.appender.configAppender.layout.ConversionPattern=%m UTCTime="%d{}{GMT}"%n
# Make sure configLogger can also log via the rootLogger (or other ancestor)
log4j.additivity.config=true

"""


class Log4ConfigurationFile(FileWriter):
    """Class to read and write configuration to a log4 configuration file."""

    only_write_on_changes = True
    comparitor_line_skip_count = 2
    configuration_file_template = """# This file is automatically generated. Manual changes will be lost.
# Generated at %(generated_time)s by %(generator)s

%(log4_boilerplate)s

# Define custom log levels for loggers
%(custom_log_levels)s
"""

    log4_boilerplate = """\
"""
    log4_boilerplate1 = BOILERPLATE1
    log4_boilerplate2 = ""
    log4_boilerplate3 = """\
###############################################################################

# Define default log levels for loggers
log4j.logger.administrator=INFO, administratorAppender
log4j.logger.config=INFO, configAppender
log4j.logger.developer=INFO, developerAppender
log4j.logger.network=INFO, networkAppender
"""
    log4_boilerplate4 = ""

    plugins = []
    plugin_db_info = set()

    logger_re = re.compile("^log4j\.logger\.(.+)=(FATAL|ERROR|WARN|INFO|DEBUG|TRACE).*")

    def __init__(self, file_path):
        FileWriter.__init__(self, file_path)
        self.append_plugins()
        self.update_log_level_paths()

    def append_plugins(self):
        """ Load and merge plugin template information """

        # Reset Plugin Boilerplate
        self.log4_boilerplate2 = ""
        self.log4_boilerplate4 = ""

        try:
            # Create plugins.
            self.plugins = list(Plugin.load_all())
            #Append all the plugin log4 appenders and logger
            for plugin in self.plugins:
                stringappend = plugin.log4stringappender()
                if stringappend:
                    self.log4_boilerplate2 = self.log4_boilerplate2 + stringappend[0]
                    self.log4_boilerplate4 = self.log4_boilerplate4 + stringappend[1]

        except ImportError:
            #No plugins found for a product
            pass
        finally:
            self.log4_boilerplate = \
                self.log4_boilerplate1 + self.log4_boilerplate2 + self.log4_boilerplate3 + self.log4_boilerplate4

    def write(self, log_levels):
        """Writes out a log4 configuration file.

        log_levels is a dictionary where the key is the logger name and the
        value is the log4 log level
        """

        log_levels = [self._get_log4_logger_configuration(key, value) for key, value in log_levels.iteritems()]

        log_conf_paramaters = {}
        log_conf_paramaters['generator'] = __name__
        log_conf_paramaters['generated_time'] = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime())
        log_conf_paramaters['log4_boilerplate'] = self.log4_boilerplate
        log_conf_paramaters['custom_log_levels'] = "\n".join(log_levels)

        log_conf_content = self.configuration_file_template % log_conf_paramaters

        FileWriter.write_file(self, log_conf_content)

    def get_log_levels(self):
        """Reads the log level configuration from a log4 file."""
        log_levels = {}
        try:
            with open(self.get_file_path()) as log_conf_file:
                for line in log_conf_file:
                    match = self.logger_re.match(line)
                    if match:
                        logger_name = match.group(1)
                        log4_level = match.group(2)
                        log_levels[logger_name] = get_logging_level(log4_level)
        except IOError as excpt:
            # Ignore "No such file or directory" errors as the absense of a log
            # configuration file is part of normal operation.
            if excpt.errno != errno.ENOENT:
                raise
        return log_levels

    def _get_log4_logger_configuration(self, logger_name, log4_level):
        """Returns a log4 configuration line for a logger."""

        # If this is a top level logger, then make sure it is configured with
        # an appender. By convention, the appropriate appender will be named
        # after the top level logger
        if "." not in logger_name:
            return "log4j.logger.%s=%s, %sAppender" % (logger_name, log4_level, logger_name)
        else:
            return "log4j.logger.%s=%s" % (logger_name, log4_level)

    def update_log_level_paths(self):
        """ Returns a list of database paths for additional plugin log level tables"""
        try:
            # Create plugins.
            all_plugins = list(Plugin.load_all())
            # Append all the plugin log level database paths
            for plugin in all_plugins:
                try:
                    database_appender = plugin.loglevelpathappender()
                    if database_appender:
                        # Add tuple of db_path & inotify to plugin info
                        self.plugin_db_info.add(database_appender)
                except AttributeError:
                    # Plugin doesn't have log level path
                    pass

        except ImportError:
            #No plugins found for a product
            pass

    def get_plugin_db_info(self):
        """ Returns a list of strings of additional plugin log level database paths"""
        return self.plugin_db_info


class Log4ConfigurationLoader(object):
    """Monitors the log4 configuration file and updates the logging levels if
    the file changes.
    """

    def __init__(self, file_path=None):
        if file_path is None:
            if PlatformInfo().target:
                file_path = '/tandberg/etc/ttlog.conf'
            else:
                file_path = '/tmp/logging/ttlog.conf'

        self.log4_file = Log4ConfigurationFile(file_path)

    def get_file_path(self):
        """Returns the file path for the log configuration file"""
        return self.log4_file.get_file_path()

    def update_log_levels(self):
        """Reads log levels from the configuration file and updates the logging
        system."""
        log_levels = self.log4_file.get_log_levels()
        base_platform.expressway.logframework.setup.update_log_levels(log_levels)


class Log4ConfigurationMonitor(FileMonitor):
    """Monitors the log4 configuration file and updates the logging levels if
    the file changes.
    """

    def __init__(self, file_path=None):
        FileMonitor.__init__(self)
        self.configuration_loader = Log4ConfigurationLoader(file_path)
        self.configuration_loader.update_log_levels()
        self.register_file_observer(self.configuration_loader.get_file_path(), self._on_change)
        self.start()

    def _on_change(self, _file_path):
        """Reads log levels from the update configuration file and updates the
        logging system."""
        self.configuration_loader.update_log_levels()


class TwistedLog4ConfigurationMonitor(TwistedFileMonitor):
    """Monitors the log4 configuration file with the twisted file monitor
    and updates the logging levels if the file changes.
    """

    def __init__(self, file_path=None, twisted_reactor=None):
        TwistedFileMonitor.__init__(self, twisted_reactor)
        self.configuration_loader = Log4ConfigurationLoader(file_path)
        self.configuration_loader.update_log_levels()
        self.register_file_observer(self.configuration_loader.get_file_path(), self._on_change)

    def _on_change(self, _file_path):
        """Reads log levels from the update configuration file and updates the
        logging system."""
        self.configuration_loader.update_log_levels()
