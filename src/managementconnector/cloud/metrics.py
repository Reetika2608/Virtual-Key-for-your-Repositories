""" Metrics """
import json
import os
import traceback
import urllib2


from managementconnector.config.managementconnectorproperties import ManagementConnectorProperties
from managementconnector.platform.http import Http
from managementconnector.platform.serviceutils import ServiceUtils


DEV_LOGGER = ManagementConnectorProperties.get_dev_logger()
ADMIN_LOGGER = ManagementConnectorProperties.get_admin_logger()


class Metrics(object):
    """ Management Connector Metrics  Class """

    # -------------------------------------------------------------------------

    def __str__(self):
        return 'Management Connector Metrics Class'

    # -------------------------------------------------------------------------

    __repr__ = __str__

    # -------------------------------------------------------------------------

    def __init__(self, config_handler, oauth):
        """ Atlas __init__  """

        self._config = config_handler
        self._oauth = oauth

    # -------------------------------------------------------------------------

    def _send_request(self, header, request):
        """_send"""

        # User Agent Key Field, in how data is routed from Metrics API and to Splunck
        version = ServiceUtils.get_version(ManagementConnectorProperties.SERVICE_NAME)
        user_agent = self._config.read(ManagementConnectorProperties.METRICS_UA) + "/" + version

        header[ManagementConnectorProperties.USER_AGENT] = user_agent

        DEV_LOGGER.debug('Detail="_send %s"' % (self._config.read(ManagementConnectorProperties.METRICS_UA)))

        metrics_url =  Metrics.get_metrics_url(self._config)

        request['time'] = ManagementConnectorProperties.get_utc_time('%Y-%m-%dT%H:%M:%SZ')

        testmode = self._config.read(ManagementConnectorProperties.METRICS_TESTMODE) == "true"

        # any events that are generated by test users, or integration tests must be marked as env="TEST"
        # so that they are not included in production data
        if testmode:
            request['env'] = "TEST"

        metrics_body = {"metrics": [request]}

        return Http.post(metrics_url, header, json.dumps(metrics_body))

    # -------------------------------------------------------------------------

    def _send(self, header, request):
        """ Wraps send post in some handling logic """

        enabled = self._config.read(ManagementConnectorProperties.METRICS_ENABLED) == "true"

        if enabled:
            DEV_LOGGER.debug('Detail="Metrics Enabled"')
        else:
            DEV_LOGGER.debug('Detail="Metrics Not Enabled"')
            return

        try:
            return self._send_request(header, request)
        except urllib2.URLError as url_error:
            DEV_LOGGER.error('Detail="Send Metrics URL Error=%s, stacktrace=%s"' %
                             (url_error, traceback.format_exc()))
        except Exception, error:  # pylint: disable=W0703
            DEV_LOGGER.error('Detail="Send Metrics Error =%s, stacktrace=%s"' %
                             (error, traceback.format_exc()))

    # -------------------------------------------------------------------------

    def _send_alarm_metrics(self, header,  service, context):
        """_send_alarm_metrics"""

        DEV_LOGGER.debug('Detail="_send_alarm_metrics"')

        alarms = ServiceUtils.get_alarms(service, ServiceUtils.get_alarm_url_prefix(self._config),
                                         include_suppressed=True)
        # Feedback from Metrics API was to have a Metric Per Alarm, for faster Searches

        num_alarms = len(alarms)
        if alarms is not None and num_alarms > 0:
            for alarm in alarms:
                if service.get_name() != ManagementConnectorProperties.SERVICE_NAME:
                    alarm.pop('description', None)
                post_data = {"key": "connector_alarm", "context": context, "value": alarm}
                DEV_LOGGER.debug('Detail="_send_alarm_metrics: Sending alarm %s"', alarm['id'])
                self._send(header, post_data)

    # -------------------------------------------------------------------------

    def _send_service_metrics(self, header, service, context):
        """_send_service_metrics"""

        DEV_LOGGER.debug('Detail="_send_service_metrics"')

        connector_status = ''
        start_time = ''
        cpu = ''
        memory = ''

        if service.get_composed_status() == 'running':

            cpu, memory = service.get_service_metrics()

            connector_status = ServiceUtils.get_connector_status(service)

            start_time = ServiceUtils.get_service_start_time(service.get_name())

        current_versions = ServiceUtils.get_current_versions(self._config)
        previous_versions = ServiceUtils.get_previous_versions(self._config)

        status = {
            "connector_state": service.get_composed_status(),
            "connector_start": start_time,
            "connector_status": connector_status,
            "connector_cpu": cpu,
            "connector_memory": memory,
            "connector_current": current_versions.get(service.get_name(), ''),
            "connector_previous": previous_versions.get(service.get_name(), '')
        }

        if service.get_name() == ManagementConnectorProperties.SERVICE_NAME:
            # accountExpiration may not be set
            if ("accountExpiration" in self._oauth.oauth_response):
                status["accountExpiration"] = self._oauth.oauth_response["accountExpiration"]
                
            status["certManagement"] = self._config.read(ManagementConnectorProperties.ADD_FUSION_CERTS)
            status["allCertCreated"] = "true" if os.path.exists(ManagementConnectorProperties.COMBINED_CA_FILE) else \
                "false"

        post_data = {"key": "connector_status", "context": context, "value": status}

        self._send(header, post_data)

    # -------------------------------------------------------------------------

    def send_metrics(self, header, service, send_status=True):
        """ send_metrics """

        DEV_LOGGER.debug('Detail="send_metrics called with %s for service %s"', send_status, service.get_name())

        context = self.get_context(service.get_name())

        if send_status:
            self._send_service_metrics(header, service, context)

            self._send_alarm_metrics(header, service, context)

     # -------------------------------------------------------------------------

    def send_error_metrics(self, header, service, error):
        """ send_error_metrics """

        DEV_LOGGER.debug('Detail="send_error_metrics called"')

        context = self.get_context(service.get_name())

        post_data = {"key": "unhandled_error", "context": context, "value": error}
        self._send(header, post_data)

    # -------------------------------------------------------------------------

    def send_mercury_metrics(self, header, name, status):
        """ send_error_metrics """

        DEV_LOGGER.debug('Detail="send_mercury_metrics called"')

        context = self.get_context(name)

        post_data = {"key": "mercury", "context": context, "value": status}

        self._send(header, post_data)

    # -------------------------------------------------------------------------

    def send_mercury_error_metrics(self, header, name, status):
        """ send_mercury_error_metrics """

        DEV_LOGGER.debug('Detail="send_mercury_error_metrics called"')

        context = self.get_context(name)

        post_data = {"key": "mercury_error", "context": context, "value": status}

        self._send(header, post_data)

    # -------------------------------------------------------------------------

    def send_watchdog_restart_metrics(self, header, name, status):
        """ send metrics on watchdog automatic restart"""

        DEV_LOGGER.debug('Detail="send_watchdog_restart_metrics called"')

        context = self.get_context(name)

        post_data = {"key": "watchdog_restart", "context": context, "value": status}

        self._send(header, post_data)

    # -------------------------------------------------------------------------

    def get_context(self, service_name):
        """ get context for metrics """

        serial_number = self._config.read(ManagementConnectorProperties.SERIAL_NUMBER)
        connector_version = ServiceUtils.get_version(service_name)
        vcs_version = self._config.read(ManagementConnectorProperties.VERSION)
        cluster_id = self._config.read(ManagementConnectorProperties.CLUSTER_ID)

        context = {"cluster_id": cluster_id, "connector_type": service_name,
                   "connector_id": service_name + "@" + serial_number,
                   "connector_version": connector_version, "vcs_version": vcs_version}

        return context

    @staticmethod
    def get_metrics_url(config):
        """ build the metrics end-point """
        host = config.read(ManagementConnectorProperties.METRICS_HOST)
        url = config.read(ManagementConnectorProperties.METRICS_URL)
        return host + url
