import logging
import os.path
import sys

logger = logging.getLogger('build.managementconnector_plugin')
m = module('managementconnector_plugin')
m.source('./files/tandberg/locale/en_US.utf8/LC_MESSAGES/managementconnector.po')
m.on_target('swpkg.lst')

m.set_build_env('PYCHK_SETTINGS', ",".join( [
    "--disable=C0301",  # Ignore "Line too long" warnings
    ]))

contents = [

#    ("(empty)",                                 "ni/"),
    ("(empty)",                                 "ni/managementconnector/"),
    ("(empty)",                                 "ni/managementconnector/config/"),
    ("(empty)",                                 "ni/managementconnector/cloud/"),
    ("(empty)",                                 "ni/managementconnector/lifecycle/"),
    ("(empty)",                                 "ni/managementconnector/service/"),
    ("(empty)",                                 "ni/managementconnector/platform/"),
    ("(empty)",                                 "ni/managementconnector/events/"),

    ("src/managementconnector/cloud/atlas.py",      "ni/managementconnector/cloud/"),
    ("src/managementconnector/cloud/metrics.py",      "ni/managementconnector/cloud/"),
    ("src/managementconnector/config/config.py",                  "ni/managementconnector/config/"),
    ("src/managementconnector/config/certhandler.py",                  "ni/managementconnector/config/"),
    ("src/managementconnector/config/databasehandler.py",                  "ni/managementconnector/config/"),
    ("src/managementconnector/config/jsonhandler.py",                  "ni/managementconnector/config/"),
    ("src/managementconnector/managementconnector.py",      "ni/managementconnector/"),
    ("src/managementconnector/managementconnectormain.py",  "ni/managementconnector/"),
    ("src/managementconnector/config/managementconnectorproperties.py",  "ni/managementconnector/config/"),
    ("src/managementconnector/platform/hybridrequesthandler.py", "ni/managementconnector/platform/"),
    ("src/managementconnector/platform/system.py",                   "ni/managementconnector/platform/"),
    ("src/managementconnector/platform/http.py", "ni/managementconnector/platform/"),
    ("src/managementconnector/service/service.py", "ni/managementconnector/service/"),
    ("src/managementconnector/service/crashmonitor.py", "ni/managementconnector/service/"),
    ("src/managementconnector/platform/serviceutils.py", "ni/managementconnector/platform/"),
    ("src/managementconnector/platform/libraryutils.py", "ni/managementconnector/platform/"),
    ("src/managementconnector/platform/logarchiver.py", "ni/managementconnector/platform/"),
    ("src/managementconnector/platform/corearchiver.py", "ni/managementconnector/platform/"),
    ("src/managementconnector/service/servicemanager.py", "ni/managementconnector/service/"),
    ("src/managementconnector/service/servicemetrics.py", "ni/managementconnector/service/"),
    ("src/managementconnector/service/servicedependency.py", "ni/managementconnector/service/"),
    ("src/managementconnector/service/connectorservice.py", "ni/managementconnector/service/"),
    ("src/managementconnector/service/eventsender.py", "ni/managementconnector/service/"),
    ("src/managementconnector/service/eventdampener.py", "ni/managementconnector/service/"),
    ("src/managementconnector/cloud/oauth.py", "ni/managementconnector/cloud/"),
    ("src/managementconnector/platform/alarms.py", "ni/managementconnector/platform/"),
    ("src/managementconnector/service/manifest.py", "ni/managementconnector/service/"),
    ("src/managementconnector/deploy.py", "ni/managementconnector/"),
    ("src/managementconnector/deploythread.py", "ni/managementconnector/"),
    ("src/managementconnector/deployrunner.py", "ni/managementconnector/"),
    ("src/managementconnector/platform/certnamematch.py", "ni/managementconnector/platform/"),
    ("src/managementconnector/cloud/schema.py", "ni/managementconnector/cloud/"),
    ("src/managementconnector/cloud/atlaslogger.py", "ni/managementconnector/cloud/"),
    ("src/managementconnector/cloud/wdm.py", "ni/managementconnector/cloud/"),
    ("src/managementconnector/cloud/mercury.py", "ni/managementconnector/cloud/"),
    ("src/managementconnector/cloud/features.py", "ni/managementconnector/cloud/"),
    ("src/managementconnector/cloud/u2c.py", "ni/managementconnector/cloud/"),
    ("src/managementconnector/cloud/remotedispatcher.py", "ni/managementconnector/cloud/"),

    ("src/managementconnector/lifecycle/lifecycleutils.py", "ni/managementconnector/lifecycle/"),
    ("src/managementconnector/lifecycle/mercuryrunner.py", "ni/managementconnector/lifecycle/"),
    ("src/managementconnector/lifecycle/mercurythread.py", "ni/managementconnector/lifecycle/"),
    ("src/managementconnector/lifecycle/machineaccountrunner.py", "ni/managementconnector/lifecycle/"),
    ("src/managementconnector/lifecycle/machineaccountthread.py", "ni/managementconnector/lifecycle/"),
    ("src/managementconnector/lifecycle/threadrunner.py", "ni/managementconnector/lifecycle/"),
    ("src/managementconnector/lifecycle/featurethread.py", "ni/managementconnector/lifecycle/"),
    ("src/managementconnector/lifecycle/u2cthread.py", "ni/managementconnector/lifecycle/"),
    ("src/managementconnector/lifecycle/watchdog.py", "ni/managementconnector/lifecycle/"),

    ("src/managementconnector/platform/hybridlogsetup.py",  "ni/managementconnector/platform/"),
    ("src/managementconnector/platform/managementconnectorlogplugin.py", "ni/utils/logging/plugins/"),

    ("src/managementconnector/events/logpushevent.py", "ni/managementconnector/events/"),
    ("src/managementconnector/events/upgradeevent.py", "ni/managementconnector/events/"),

    ("(empty)",                                 "ni/cafedynamic/"),
    ("src/managementconnector/cafemanager/__init__.py",                     "ni/cafedynamic/"),
    ("src/managementconnector/cafemanager/cafemanager.py",                  "ni/cafedynamic/"),
    ("src/managementconnector/cafemanager/cafedatabase.py",                 "ni/cafedynamic/"),
    ("src/managementconnector/cafemanager/cafeconvenience.py",              "ni/cafedynamic/"),
    ("src/managementconnector/cafemanager/cafecomponentconfig.py",          "ni/cafedynamic/"),
    ("src/managementconnector/cafemanager/cafefilewriter.py",               "ni/cafedynamic/"),
    ("src/managementconnector/cafemanager/cafestatusmanager.py",            "ni/cafedynamic/"),
    ("src/managementconnector/config/cafeproperties.py",               "ni/managementconnector/config/"),
    ("src/managementconnector/applicationrunner.py",                 "ni/managementconnector/"),

    ("src/managementconnector/cafemanager/cafecommandhandlerworker.py",   "ni/cafedynamic/"),
    ("src/managementconnector/cafemanager/cafecommandadapterworker.py",   "ni/cafedynamic/"),
    ("src/managementconnector/cafemanager/cafexstatusworker.py",          "ni/cafedynamic/"),
    ("src/managementconnector/cafemanager/cafexutil.py",                 "ni/cafedynamic/"),

#    ("(empty)",                                 "/tandberg/persistent/fusion/manifests/"),

#    ("(empty)",                                 "ni/tests/"),
    ("(empty)",                                 "ni/tests/managementconnector/"),
    ("(empty)",                                 "ni/unittests/cafedynamic/"),

    ("test/managementconnector/test_atlas.py",                          "ni/tests/managementconnector/"),
    ("test/managementconnector/test_metrics.py",                        "ni/tests/managementconnector/"),
    ("test/managementconnector/test_json_handler.py",                   "ni/tests/managementconnector/"),
    ("test/managementconnector/test_http.py",                           "ni/tests/managementconnector/"),
    ("test/managementconnector/test_system.py",                         "ni/tests/managementconnector/"),
    ("test/managementconnector/test_alarms.py",                         "ni/tests/managementconnector/"),
    ("test/managementconnector/test_managementconnector.py",            "ni/tests/managementconnector/"),
    ("test/managementconnector/test_deploy.py",                         "ni/tests/managementconnector/"),
    ("test/managementconnector/test_deploy_mock.py",                    "ni/tests/managementconnector/"),
    ("test/managementconnector/test_xstatus.py",                        "ni/tests/managementconnector/"),
    ("test/managementconnector/test_xcommand.py",                       "ni/tests/managementconnector/"),
    ("test/managementconnector/test_oauth.py",                          "ni/tests/managementconnector/"),
    ("test/managementconnector/test_service.py",                        "ni/tests/managementconnector/"),
    ("test/managementconnector/test_serviceutils.py",                   "ni/tests/managementconnector/"),
    ("test/managementconnector/test_xcommand.py",                       "ni/tests/managementconnector/"),
    ("test/managementconnector/test_databasehandler.py",                "ni/tests/managementconnector/"),
    ("test/managementconnector/test_hybrid_syslog.py",                  "ni/tests/managementconnector/"),
    ("test/managementconnector/test_certhandler.py",                    "ni/tests/managementconnector/"),
    ("test/managementconnector/test_machineaccountthread.py",           "ni/tests/managementconnector/"),
    ("test/managementconnector/test_mercurythread.py",                  "ni/tests/managementconnector/"),
    ("test/managementconnector/test_mercury.py",                        "ni/tests/managementconnector/"),
    ("test/managementconnector/test_features.py",                       "ni/tests/managementconnector/"),
    ("test/managementconnector/test_remotedispatcher.py",               "ni/tests/managementconnector/"),
    ("test/managementconnector/test_watchdog.py",                       "ni/tests/managementconnector/"),
    ("test/managementconnector/test_logarchiver.py",                    "ni/tests/managementconnector/"),
    ("test/managementconnector/test_corearchiver.py",                   "ni/tests/managementconnector/"),
    ("test/managementconnector/test_crashmonitor.py",                   "ni/tests/managementconnector/"),
    ("test/managementconnector/test_eventsender.py",                    "ni/tests/managementconnector/"),
    ("test/managementconnector/test_u2c.py",                            "ni/tests/managementconnector/"),
    ("test/managementconnector/test_eventdampener.py",                  "ni/tests/managementconnector/"),
    ("test/managementconnector/test_hybridrequesthandler.py",           "ni/tests/managementconnector/"),
    ("test/cafemanager/test_cafemanager.py",            "ni/unittests/cafedynamic/"),
    ("test/cafemanager/test_cafestatusmanager.py",      "ni/unittests/cafedynamic/"),
    ("test/cafemanager/test_cafeconvenience.py",        "ni/unittests/cafedynamic/"),
    ("test/cafemanager/test_cafefilewriter.py",         "ni/unittests/cafedynamic/"),
    ("test/cafemanager/test_cafecomponentconfig.py",    "ni/unittests/cafedynamic/"),
    ("test/cafemanager/mockcafedatabase.py",            "ni/unittests/cafedynamic/"),
    ("test/cafemanager/mockcafemanager.py",             "ni/unittests/cafedynamic/"),
]

m.python_source(contents,
    exclude_pylint=[
        "test/managementconnector/test_alarms.py",
        "test/managementconnector/test_atlas.py",
        "test/managementconnector/test_metrics.py",
        "test/managementconnector/test_json_handler.py",
        "test/managementconnector/test_system.py",
        "test/managementconnector/test_http.py",
        "test/managementconnector/test_managementconnector.py",
        "test/managementconnector/test_deploy.py",
        "test/managementconnector/test_deploy_mock.py",
        "test/managementconnector/test_xstatus.py",
        "test/managementconnector/test_xcommand.py",
        "test/managementconnector/test_oauth.py",
        "test/managementconnector/test_service.py",
        "test/managementconnector/test_serviceutils.py",
        "test/managementconnector/test_xcommand.py",
        "test/managementconnector/test_databasehandler.py",
        "test/managementconnector/test_hybrid_syslog.py",
        "test/managementconnector/test_certhandler.py",
        "test/managementconnector/test_machineaccountthread.py",
        "test/managementconnector/test_mercury.py",
        "test/managementconnector/test_mercurythread.py",
        "test/managementconnector/test_remotedispatcher.py",
        "test/managementconnector/test_crashmonitor.py",
        "test/managementconnector/test_u2c.py",
        "test/managementconnector/test_watchdog.py",
        "test/managementconnector/test_logarchiver.py",
        "test/managementconnector/test_eventdampener.py",
        "test/cafemanager/test_cafemanager.py",
        "test/cafemanager/test_cafestatusmanager.py",
        "test/cafemanager/test_cafeconvenience.py",
        "test/cafemanager/test_cafefilewriter.py",
        "test/cafemanager/test_cafecomponentconfig.py",
        "test/cafemanager/mockcafedatabase.py",
        "test/cafemanager/mockcafemanager.py",
        "src/managementconnector/cloud/schema.py",
    ]
)

def assert_module_paths(content):
    """ 
        This function is used to asserts all FMC module paths contain 
        a reference to 'managementconnector' or 'cafedynamic' to prevent 
        import issues in long standing running code i.e managementframework 
        - xstatus.
    """
    for source, destination in content:
        filename = os.path.basename(source)
        if "managementconnector" in filename or "managementconnector" in destination or "cafedynamic" in filename or "cafedynamic" in destination:
            continue

        logger.error(" Neither required patterns found in: %s or %s", filename, destination)
        sys.exit(1)

assert_module_paths(contents)
